<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="EtherCatDiag" Id="{87cc89a5-0064-4f3f-b6f3-eb8571bf3412}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM EtherCatDiag
VAR
	bena: BOOL;
	test : Tc2_Standard.R_TRIG;
	
	(* Execute *)
	bExecute_X1: 					BOOL;
	
	(* FB's Required *)
	fbGetCfgSlaves_X1  			: FB_EcGetConfSlaves;       //Get Slave Details
	fbGetAllSlaveStates_X1			: FB_EcGetAllSlaveStates;   //Get Slave State
	
	(* Status *)
	nCfgSlaveCount_X1				: UINT;                     //Actual Slave Count (Slave Details)
	nEcSlavesRead_X1				: UINT;						//Actual Salve Count (Slave State)
	
	(* POU Var *)
	sEcMasterNetId_X1			: T_AmsNetId;               //Ams NetID X1
	ArrEcConfSlaveInfo_X1: ARRAY [1..GVL.ECAT_MAX_SLAVES_X1] OF ST_EcSlaveConfigData; //Slave Details Array
	ArrEcSlaveState_X1:	ARRAY [1..GVL.ECAT_MAX_SLAVES_X1] OF ST_EcSlaveState;		//Slave State Array
	I_X1: INT;
	iDiagIndex_X1					: ARRAY [0..3] OF UINT;
	sState_X1: STRING;
	arrSlaveInfo_X1 				: ARRAY [1..GVL.ECAT_MAX_SLAVES_X1] OF ST_SlaveStateInfo; //Slave Data
	
	(* Error Count *)
	bCheckError : BOOL;
	nNodeErrorCount   : INT;
	N_X1:INT:=1;
	ErrorState_X1:INT;
	fbGetSlaveState_X1     : FB_EcReqSlaveState;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[test(CLK:=bena,Q=>bExecute_X1);

(*Generate NetId*)
sEcMasterNetId_X1 := F_CreateAmsNetId(nIds := GVL.EC_MasterNetID_Arr_X1);

(* Get Configured Slaves *)
fbGetCfgSlaves_X1(
	sNetId:= sEcMasterNetId_X1,
	pArrEcConfSlaveInfo:= ADR(ArrEcConfSlaveInfo_X1),
	cbBufLen:= SIZEOF(ArrEcConfSlaveInfo_X1),
	bExecute	:= bExecute_X1,
	tTimeout:= DEFAULT_ADS_TIMEOUT,
	nSlaves=> nCfgSlaveCount_X1 );

(*Get Slave States*)
fbGetAllSlaveStates_X1(
	sNetId		:= sEcMasterNetId_X1,
	pStateBuf	:= ADR(ArrEcSlaveState_X1),
	cbBufLen	:= SIZEOF(ArrEcSlaveState_X1),
	bExecute	:= bExecute_X1,
	tTimeout	:= DEFAULT_ADS_TIMEOUT,
	nSlaves	=> nEcSlavesRead_X1
);


IF NOT fbGetAllSlaveStates_X1.bBusy THEN
		fbGetCfgSlaves_X1(bExecute:= FALSE);
		fbGetAllSlaveStates_X1(bExecute:= FALSE);
		IF NOT fbGetAllSlaveStates_X1.bError THEN
			IF nEcSlavesRead_X1 = nCfgSlaveCount_X1 THEN
				FOR I_X1 := 0 TO 3 DO
					iDiagIndex_X1[I_X1] := 0;
				END_FOR

		(* split slave state and link state *)
			FOR I_X1 := 1 TO MIN(nEcSlavesRead_X1, GVL.ECAT_MAX_SLAVES_X1) DO
				(* slave state*)
				arrSlaveInfo_X1[I_X1].stState.eEcState 				:= ArrEcSlaveState_X1[I_X1].deviceState AND 16#0F;
				arrSlaveInfo_X1[I_X1].stState.bError 					:= ArrEcSlaveState_X1[I_X1].deviceState.4;
				arrSlaveInfo_X1[I_X1].stState.bInvalidVPRS 			:= ArrEcSlaveState_X1[I_X1].deviceState.5;
				(* link state *)
				arrSlaveInfo_X1[I_X1].stState.bNoCommToSlave 	:= ArrEcSlaveState_X1[I_X1].linkState.0;
				arrSlaveInfo_X1[I_X1].stState.bLinkError 				:= ArrEcSlaveState_X1[I_X1].linkState.1;
				arrSlaveInfo_X1[I_X1].stState.bMissingLink 			:= ArrEcSlaveState_X1[I_X1].linkState.2;
				arrSlaveInfo_X1[I_X1].stState.bUnexpectedLink		:= ArrEcSlaveState_X1[I_X1].linkState.3;
				arrSlaveInfo_X1[I_X1].stState.bPortA 					:= ArrEcSlaveState_X1[I_X1].linkState.4;
				arrSlaveInfo_X1[I_X1].stState.bPortB 					:= ArrEcSlaveState_X1[I_X1].linkState.5;
				arrSlaveInfo_X1[I_X1].stState.bPortC 					:= ArrEcSlaveState_X1[I_X1].linkState.6;
				arrSlaveInfo_X1[I_X1].stState.bPortD 					:= ArrEcSlaveState_X1[I_X1].linkState.7;
				(* DiagData *)
				arrSlaveInfo_X1[I_X1].bDiagData	:= ((ArrEcSlaveState_X1[I_X1].deviceState AND 16#F0) <> 0) OR
					(((ArrEcSlaveState_X1[I_X1].deviceState AND 16#0F) > 0) AND ((ArrEcSlaveState_X1[I_X1].deviceState AND 16#0F) < 8)) OR
					(ArrEcSlaveState_X1[I_X1].linkState <> 0);

				IF arrSlaveInfo_X1[I_X1].bDiagData THEN
					IF (I_X1=0) THEN
						iDiagIndex_X1[0] := 0;
					ELSE
						IF (iDiagIndex_X1[0] = 0) AND NOT arrSlaveInfo_X1[1].bDiagData THEN
							iDiagIndex_X1[0] :=  DINT_TO_UINT(I_X1);
						END_IF
					END_IF
				END_IF


				arrSlaveInfo_X1[I_X1].sName							:=	ArrEcConfSlaveInfo_X1[I_X1].sName;
				arrSlaveInfo_X1[I_X1].sType							:=	ArrEcConfSlaveInfo_X1[I_X1].sType;
				arrSlaveInfo_X1[I_X1].nECAddr						:=	ArrEcConfSlaveInfo_X1[I_X1].nAddr;

				IF arrSlaveInfo_X1[I_X1].stState.bError THEN
					sState_X1	 	:=	'ERR';
				ELSE
					sState_X1		:=	'';
				END_IF

				IF arrSlaveInfo_X1[I_X1].stState.bInvalidVPRS THEN
					sState_X1	 	:=	' VPRS INIT_ERR';
				END_IF

				IF arrSlaveInfo_X1[I_X1].stState.bNoCommToSlave THEN
					sState_X1	 	:=	CONCAT ( sState_X1, ' NO_COMM');
				END_IF

				IF arrSlaveInfo_X1[I_X1].stState.bLinkError THEN
					sState_X1	 	:=	CONCAT ( sState_X1, ' LINK_ERR');
				END_IF

				IF arrSlaveInfo_X1[I_X1].stState.bUnexpectedLink THEN
					sState_X1	 	:=	CONCAT ( sState_X1, ' UNEXP_LINK');
				END_IF

				IF arrSlaveInfo_X1[I_X1].stState.bMissingLink THEN
					sState_X1	 	:=	CONCAT ( sState_X1, ' LINK_MIS ');
				END_IF

				IF arrSlaveInfo_X1[I_X1].stState.bPortA THEN
					sState_X1	 	:=	CONCAT ( sState_X1, 'A ');
				END_IF

				IF arrSlaveInfo_X1[I_X1].stState.bPortB THEN
					sState_X1	 	:=	CONCAT ( sState_X1, 'B ');
				END_IF


				IF arrSlaveInfo_X1[I_X1].stState.bPortC THEN
					sState_X1	 	:=	CONCAT ( sState_X1, 'C ');
				END_IF

				IF arrSlaveInfo_X1[I_X1].stState.bPortD THEN
					sState_X1	 	:=	CONCAT ( sState_X1, 'D ');
				END_IF

				arrSlaveInfo_X1[I_X1].sStateString := sState_X1;
				
				CASE  arrSlaveInfo_X1[I_X1].stState.eEcState	OF 
						
						0:	arrSlaveInfo_X1[I_X1].sEcState	:= 'Úndefined';
						1:	arrSlaveInfo_X1[I_X1].sEcState	:= 'INIT';
						2:	arrSlaveInfo_X1[I_X1].sEcState	:= 'PREOP';
						3:	arrSlaveInfo_X1[I_X1].sEcState	:= 'BOOT';
						4:	arrSlaveInfo_X1[I_X1].sEcState	:= 'SAFEOP';
						8:	arrSlaveInfo_X1[I_X1].sEcState	:= 'OP';
						
				END_CASE
			END_FOR
		END_IF
	END_IF
END_IF

IF bCheckError THEN
		IF N_X1 = 0 THEN
			N_X1 :=1;
		END_IF
		IF arrSlaveInfo_X1[N_X1].sEcState <> 'OP' AND arrSlaveInfo_X1[N_X1].sEcState <> '' THEN
			CASE ErrorState_X1 OF 
				0:
					fbGetSlaveState_X1(sNetId:= sEcMasterNetId_X1,
									   nSlaveAddr:= arrSlaveInfo_X1[N_X1].nECAddr, 
									   bExecute:=TRUE,
									   tTimeout:= DEFAULT_ADS_TIMEOUT,
									   state:=EC_DEVICE_STATE_ERROR);
					ErrorState_X1 := ErrorState_X1+1;
					
				2:
					IF NOT fbGetSlaveState_X1.bBusy AND NOT fbGetSlaveState_X1.bError THEN
						fbGetSlaveState_X1(bExecute:=FALSE);
						ErrorState_X1 := ErrorState_X1+1;
					END_IF
					IF fbGetSlaveState_X1.bBusy AND fbGetSlaveState_X1.bError THEN
						ErrorState_X1 := 100;
					END_IF
				3:
					fbGetSlaveState_X1(sNetId:= sEcMasterNetId_X1,
									   nSlaveAddr:= arrSlaveInfo_X1[N_X1].nECAddr, 
									   bExecute:=TRUE,
									   tTimeout:= DEFAULT_ADS_TIMEOUT,
									   state:=EC_DEVICE_STATE_OP);
					ErrorState_X1 := ErrorState_X1+1;
				4:
					IF NOT fbGetSlaveState_X1.bBusy AND NOT fbGetSlaveState_X1.bError THEN
						fbGetSlaveState_X1(bExecute:=FALSE);
						ErrorState_X1 := ErrorState_X1+1;
					END_IF
					IF fbGetSlaveState_X1.bBusy AND fbGetSlaveState_X1.bError THEN
						ErrorState_X1 := 100;
					END_IF
				5:
					ErrorState_X1 := 0;
					N_X1 := N_X1+1;
			END_CASE;
		ELSE
			N_X1 := N_X1+1;
		END_IF;
		
		IF N_X1 = MIN(nEcSlavesRead_X1, GVL.ECAT_MAX_SLAVES_X1) THEN
			N_X1 := 1;
			bCheckError:=1;
		END_IF
END_IF;


]]></ST>
    </Implementation>
    <LineIds Name="EtherCatDiag">
      <LineId Id="934" Count="1" />
      <LineId Id="71" Count="1" />
      <LineId Id="929" Count="0" />
      <LineId Id="74" Count="7" />
      <LineId Id="83" Count="9" />
      <LineId Id="814" Count="104" />
      <LineId Id="951" Count="1" />
      <LineId Id="1069" Count="2" />
      <LineId Id="953" Count="0" />
      <LineId Id="987" Count="0" />
      <LineId Id="989" Count="0" />
      <LineId Id="996" Count="0" />
      <LineId Id="998" Count="1" />
      <LineId Id="1001" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="991" Count="0" />
      <LineId Id="1004" Count="0" />
      <LineId Id="1002" Count="1" />
      <LineId Id="1005" Count="0" />
      <LineId Id="1010" Count="0" />
      <LineId Id="1006" Count="3" />
      <LineId Id="992" Count="0" />
      <LineId Id="1013" Count="4" />
      <LineId Id="1011" Count="0" />
      <LineId Id="1019" Count="6" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1012" Count="0" />
      <LineId Id="1026" Count="1" />
      <LineId Id="990" Count="0" />
      <LineId Id="1028" Count="0" />
      <LineId Id="1030" Count="0" />
      <LineId Id="957" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="1031" Count="1" />
      <LineId Id="1034" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="971" Count="0" />
      <LineId Id="970" Count="0" />
      <LineId Id="968" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>