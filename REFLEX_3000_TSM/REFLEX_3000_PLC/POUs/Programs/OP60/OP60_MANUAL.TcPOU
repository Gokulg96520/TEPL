<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="OP60_MANUAL" Id="{71f11a8c-828f-48bb-9a46-5a5cbc56b5d3}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM OP60_MANUAL
VAR
	
    temp_safe:BOOL;
	enable:BOOL;
	reset:bool;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// IF MANUAL IS SELECTED 

//SR60_Vert_servo_ctrl.ABSmove_Start:=OP60_VERT_SERVO_STRT;
OP60_SERVO_POS_DONE:= SR60_Vert_servo_ctrl.pos_done;

IF In_Range(SR60_Vert_servo_status.actualPosition,OP60_VERT_SERVO_SFE_WRK_POS,3) THEN
	OP60_SERVO_ON_SFE_WRK := TRUE;
ELSE
	OP60_SERVO_ON_SFE_WRK := FALSE;
END_IF

IF In_Range(SR60_Vert_servo_status.actualPosition,OP60_VERT_SERVO_HME_POS,1) THEN
	OP60_SERVO_ON_HOME := TRUE;
ELSE
	OP60_SERVO_ON_HOME := FALSE;
END_IF

IF In_Range(SR60_Vert_servo_status.actualPosition,OP60_VERT_SERVO_WRK_POS_1,2) THEN
	OP60_SERVO_ON_WRK_1 := TRUE;
ELSE
	OP60_SERVO_ON_WRK_1 := FALSE;
END_IF

IF In_Range(SR60_Vert_servo_status.actualPosition,OP60_VERT_SERVO_WRK_POS_2,2) THEN
	OP60_SERVO_ON_WRK_2 := TRUE;
ELSE
	OP60_SERVO_ON_WRK_2 := FALSE;
END_IF

OP60_VERT_SERVO_SFE_WRK_POS   :=  OP60_HMI_Safe_Work;
OP60_VERT_SERVO_HME_POS       :=  OP60_HMI_Safe_Home;
OP60_VERT_SERVO_WRK_POS_2     :=  OP60_VERT_SERVO_WORK_POS;
OP60_VERT_SERVO_WRK_POS_1	  := (OP60_VERT_SERVO_WRK_POS_2-OP60_HMI_Servo_Pos_Offset);

SR60_Vert_servo(
	bAxis1_Ref_Switch:= , 
	bInit:= , 
	bErrorReset:= OP60_GVL.OP60_HMI_Reset OR Servo_Reset , 
	bEnable:=Servo_Enable, 
	bMoveVelocity:= , 
	bHalt:= , 
	bManualMode:= MANUAL_SELECTED AND OP60_ManualSelected, 
	fHomePos:= , 
	fOverride:= , 
	fTargetPosition:= SR60_Vert_servo_ctrl.Position, 
	fTargetVelocity:= SR60_Vert_servo_ctrl.Velocity, 
	fAcc:= , 
	fDec:= , 
	Servo_High_Limit:= OP60_HMI_High_Limit,	
	Servo_Low_Limit:=  OP60_HMI_Low_Limit,	
	Safe_move_Conditions:=Servo_Safety,
	Axis:=SR60_Vert_servo_Axis  , 
	bmove_home:=SR60_Vert_servo_ctrl.Axis_Home_Cmd ,
	baxis_in_home_pos=>SR60_Vert_servo_ctrl.Axis_In_Home ,
	HME_WRITE_ADD:= 16#5018, 
	bHome:=SR60_Vert_servo_ctrl.Bsethome , 
	bSetPosition:=SR60_Vert_servo_ctrl.BsetPos , 
	bMoveAbsolute:=SR60_Vert_servo_ctrl.ABSmove_Start , 
	bMoveTorque :=SR60_Vert_servo_ctrl.Torque_mode_Start,	
	bMoveRelative:=SR60_Vert_servo_ctrl.RELmove_Start , 
	stManualModeAxis:=SR60_Vert_servo_status , 
	sAxisState=>SR60_Vert_servo_ctrl.Axis_State , 
	bAxis_ready=>SR60_Vert_servo_ctrl.Axis_ready , 
	bAxisInPosition=> SR60_Vert_servo_ctrl.Axis_In_Pos, 
	bAxisError=>SR60_Vert_servo_ctrl.Axis_Error , 
	bAxisEnabled=> SR60_Vert_servo_ctrl.Axis_Enabled, 
	bAxisHomed=> SR60_Vert_servo_ctrl.Axis_reference, 
	bSetPositionDone=>   ,
    bsafe_to_move=>SR60_Vert_servo_ctrl.Safe_To_Move,  
	bABS_Pos_done=> SR60_Vert_servo_ctrl.pos_done,
	bHaltDone=> , 
	bSTOPDone=> , 
	bHomeDone=> , 
	bDone=> ,
	Actual_position=>SR60_Vert_servo_ctrl.Actual_Position ,  
	Actual_velocity=>SR60_Vert_servo_ctrl.Actual_Velocity , 
	Actual_Torque=> SR60_Vert_servo_ctrl.Actual_Torque);
	
IF MANUAL_SELECTED and OP60_ManualSelected THEN
	SR60_Vert_servo_status.targetVelocity:=250;	
END_IF	
	

OP60_LH_LVDT_VALUE := DINT_TO_REAL(OP60_LH)/10000;
OP60_RH_LVDT_VALUE := DINT_TO_REAL(OP60_RH)/10000;]]></ST>
    </Implementation>
    <LineIds Name="OP60_MANUAL">
      <LineId Id="3" Count="74" />
      <LineId Id="93" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="78" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>