<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="OP130_Manual" Id="{05a4f084-5103-42a5-a927-176846fff0fc}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM OP130_Manual
VAR

	OP130_Enable: BOOL;
	FESTO_NOT_NEED: BOOL;
	NOT_REQ: BOOL;
	OP130_LH_Servo_Safety: BOOL;
	OP130_RH_Servo_Safety:BOOL;
	CR130_RH_Rotart_Cyl_Stats: INT;
	CR130_LH_Rotart_Cyl_Stats: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//LH Rotary Cylinder

//move ZERO to STATUS
OP130_GVL.CR130_LH_Rotart_Cyl_Status:=0;

//Reset Auto Cmd IN Manual Mode & Homing
IF  (OP130_HomeRunning) THEN
	CR130_LH_Rot_Cyl.AutoCmd1:=FALSE;
	CR130_LH_Rot_Cyl.AutoCmd2:=FALSE;		
END_IF

// Safe Home
IF SR130_stManualModeAxis_LH_Vert_Servo.actualPosition >= 57.0 THEN 
	CR130_LH_Rot_Cyl.SafeHome:= TRUE ;
	ELSE 
		CR130_LH_Rot_Cyl.SafeHome:= FALSE ;
	END_IF
// Safe Work
IF SR130_stManualModeAxis_LH_Vert_Servo.actualPosition >= 57.0 THEN 
	CR130_LH_Rot_Cyl.Safework:= TRUE ;
	ELSE 
		CR130_LH_Rot_Cyl.Safework:= FALSE ;
	END_IF
	
// Manual PB  Cyl Mapping
IF (OP130_HMI_LH_Rotary_Cyl_Home_PB=TRUE) THEN
	CR130_LH_Rot_Cyl.ManualPB1:=TRUE;
	ELSE 
		CR130_LH_Rot_Cyl.ManualPB1:=FALSE;
	END_IF
	
IF (OP130_HMI_LH_Rotary_Cyl_Work_PB=TRUE) THEN
	CR130_LH_Rot_Cyl.ManualPB2:=TRUE;
	ELSE 
		CR130_LH_Rot_Cyl.ManualPB2:=FALSE;
	END_IF


	
CR130_LH_Rot_Cyl(
	Auto:=OP130_AutoSelected , 
	Manual:=OP130_ManualSelected, 
	ErrorActive:=OP130_ErrorActive , 
	ResetPB:= , 
	Sensor1:= I130_LH_ROTRY_180_DEGI1300_1, 
	Sensor2:= I130_LH_ROTRY_0_DEGI1300_0, 
	ManualPB1:= , 
	ManualPB2:= , 
	AutoCmd1:= , 
	AutoCmd2:= , 
	OperationEnable:=OperationEnable , 
	SafeHome:= , 
	SafeWork:= , 
	HomingCmd1:= , 
	Pulse_1Sec:=Pulse_Block.Q1Hz , 
	BlinkingBit:= , 
	TimeOut1:=10 , 
	TimeOut2:=10 , 
	TimeOut3:=10 , 
	Solenoid1=> O130_LH_ROTRY_180_DEG_Q1340_1, 
	Solenoid2=> O130_LH_ROTRY_0_DEG_Q1340_0, 
	AlarmSensor1=>berror[1201] , 
	AlarmSensor2=>berror[1202] , 
	AlarmSolenoid1=>berror[1205] , 
	AlarmSolenoid2=>berror[1206] , 
	AllSignal=>berror[1207] , 
	AlarmPresent=> , 
	Position1=> , 
	Position2=> , 
	HomeSensorBlink=> , 
	WorkSensorBlink=> , 
	Status:=CR130_LH_Rotart_Cyl_Stats );
	
//RH Rotary Cylinder


//move ZERO to STATUS
OP130_GVL.CR130_RH_Rotart_Cyl_Status:=0;



//Reset Auto Cmd IN Manual Mode & Homing
IF ( OP130_HomeRunning) THEN
	CR130_RH_Rot_Cyl.AutoCmd1:=FALSE;
	CR130_RH_Rot_Cyl.AutoCmd2:=FALSE;		
END_IF

// Safe Home
IF SR130_stManualModeAxis_RH_Vert_Servo.actualPosition >=57.0 THEN 
	CR130_RH_Rot_Cyl.SafeHome:= TRUE ;
	ELSE 
		CR130_RH_Rot_Cyl.SafeHome:= FALSE ;
	END_IF
// Safe Work
IF SR130_stManualModeAxis_RH_Vert_Servo.actualPosition >=57.0   THEN 
	CR130_RH_Rot_Cyl.Safework:= TRUE ;
	ELSE 
		CR130_RH_Rot_Cyl.Safework:= FALSE ;
	END_IF
	
// Manual PB  Cyl Mapping
IF (OP130_HMI_RH_Rotary_Cyl_Home_PB=TRUE) THEN
	CR130_RH_Rot_Cyl.ManualPB1:=TRUE;
	ELSE 
		CR130_RH_Rot_Cyl.ManualPB1:=FALSE;
	END_IF
	
IF (OP130_HMI_RH_Rotary_Cyl_Work_PB=TRUE) THEN
	CR130_RH_Rot_Cyl.ManualPB2:=TRUE;
	ELSE 
		CR130_RH_Rot_Cyl.ManualPB2:=FALSE;
	END_IF


	
CR130_RH_Rot_Cyl(
	Auto:=OP130_AutoSelected , 
	Manual:=OP130_ManualSelected , 
	ErrorActive:=OP130_ErrorActive , 
	ResetPB:= , 
	Sensor1:= I130_RH_ROTRY_180_DEGI1300_3, 
	Sensor2:= I130_RH_ROTRY_0_DEGI1300_2, 
	ManualPB1:= , 
	ManualPB2:= , 
	AutoCmd1:= , 
	AutoCmd2:= , 
	OperationEnable:=OperationEnable , 
	SafeHome:= , 
	SafeWork:= , 
	HomingCmd1:= , 
	Pulse_1Sec:=Pulse_Block.Q1Hz  , 
	BlinkingBit:= , 
	TimeOut1:=10 , 
	TimeOut2:=10 , 
	TimeOut3:=10 , 
	Solenoid1=> O130_RH_ROTRY_180_DEG_Q1340_3, 
	Solenoid2=> O130_RH_ROTRY_0_DEG_Q1340_2, 
	AlarmSensor1=>berror[1208] , 
	AlarmSensor2=>berror[1209] , 
	AlarmSolenoid1=>berror[1210] , 
	AlarmSolenoid2=>berror[1211] , 
	AllSignal=>berror[1212] , 
	AlarmPresent=> , 
	Position1=> , 
	Position2=> , 
	HomeSensorBlink=> , 
	WorkSensorBlink=> , 
	Status:=CR130_RH_Rotart_Cyl_Stats );
	
//LH Vertical Slide Servo

// Servo Safe To move
IF (SR130_stManualModeAxis_LH_Vert_Servo.actualPosition < 57.0 AND CR130_LH_Rot_Cyl.Position2)  THEN 
	OP130_LH_Servo_Safety:= FALSE;
	ELSE
	OP130_LH_Servo_Safety:= TRUE;	
	END_IF



//SR130_LH_Vert_Servo(
//	bAxis1_Ref_Switch:= , 
//	bInit:= , 
//	bErrorReset:= , 
//	bEnable:= , 
//	bMoveVelocity:= , 
//	bHalt:= , 
//	bManualMode:= , 
//	fHomePos:=SR130_LH_Servo_Control.Reference_Position , 
//	fOverride:= , 
//	fTargetPosition:= , 
//	fTargetVelocity:= , 
//	fAcc:= , 
//	fDec:= , 
//	Axis:=SR130_RH_Vert_Servo_Axis, 
//	bHome:=SR130_LH_Servo_Control.Reference_Start , 
//	bSetPosition:=SR130_LH_Servo_Control.BsetPos , 
//	bMoveAbsolute:=SR130_LH_Servo_Control.ABSmove_Start , 
//	bMoveRelative:=SR130_LH_Servo_Control.RELmove_Start , 
//	stManualModeAxis:=SR130_stManualModeAxis_LH_Vert_Servo, 
//	sAxisState=>SR130_LH_Servo_Control.Axis_State , 
//	bAxis_ready=>SR130_LH_Servo_Control.Axis_ready , 
//	bAxisInPosition=>SR130_LH_Servo_Control.Axis_In_Pos , 
//	bAxisError=>SR130_LH_Servo_Control.Axis_Error , 
//	bAxisEnabled=>SR130_LH_Servo_Control.Axis_Enabled , 
//	bAxisHomed=>SR130_LH_Servo_Control.Axis_reference , 
//	bSetPositionDone=> , 
//	bHaltDone=> , 
//	bSTOPDone=> , 
//	bHomeDone=> , 
//	bDone=> );

	
	//LH Vertical Servo 1
	SR130_LH_Vert_Servo(
	bAxis1_Ref_Switch:= , 
	bInit:= , 
	bErrorReset:=OP130_HMI_Reset OR Servo_Reset , 
	bEnable:= OperationEnable, 
	bMoveVelocity:= , 
	bHalt:= , 
	bManualMode:=OP130_ManualSelected , 
	fHomePos:= , 
	fOverride:= , 
	fTargetPosition:=SR130_LH_Servo_Control.Position , 
	fTargetVelocity:=SR130_LH_Servo_Control.Velocity, 
	fAcc:= , 
	fDec:= ,
	Servo_High_Limit:= SR130_LH_Vert_Servo_Max_Limit,	
	Servo_Low_Limit:=SR130_LH_Vert_Servo_Min_Lim,	 	
	WARNING_LIMIT:=1,
	TORQUE_LIMIT=>,	 
	Safe_move_Conditions:=OP130_LH_Servo_Safety , 
	Axis:= SR130_LH_Vert_Servo_Axis, 
	HME_WRITE_ADD:= 16#5013,	
	bHome:= SR130_LH_Servo_Control.Reference_Start, 
	bSetPosition:=SR130_LH_Servo_Control.BsetPos , 
	bMoveAbsolute:= SR130_LH_Servo_Control.ABSmove_Start , 
	bMoveRelative:=SR130_LH_Servo_Control.RELmove_Start , 
	bMoveTorque:=SR130_LH_Servo_Control.Torque_mode_Start , 
	stManualModeAxis:=SR130_stManualModeAxis_LH_Vert_Servo , 
	bmove_home:=SR130_LH_Servo_Control.Axis_Home_Cmd , 
	sAxisState=>SR130_LH_Servo_Control.Axis_State , 
	bAxis_ready=>SR130_LH_Servo_Control.Axis_ready , 
	bAxisInPosition=>SR130_LH_Servo_Control.Axis_In_Pos , 
	bAxisError=>berror[1250] , 
	bAxisEnabled=> SR130_LH_Servo_Control.Axis_Enabled, 
	bAxisHomed=>SR130_LH_Servo_Control.Axis_reference  , 
	bSetPositionDone=> , 
	bHaltDone=> SR130_LH_Servo_Control.Axis_Halted, 
	bSTOPDone=> SR130_LH_Servo_Control.Axis_Stopped, 
	bHomeDone=> , 
	bDone=> , 
	bTorqueReached=>SR130_LH_Servo_Control.Trq_reached , 
	bsafe_to_move=>SR130_LH_Servo_Control.Safe_To_Move , 
	baxis_in_home_pos=>SR130_LH_Servo_Control.Axis_In_Home , 
	bABS_Pos_done=> , 
	Actual_position=>SR130_LH_Servo_Control.Actual_Position, 
	Actual_velocity=>SR130_LH_Servo_Control.Actual_Velocity , 
	Actual_Torque=>SR130_LH_Servo_Control.Actual_Torque );
	

	
	//RH Vertical Slide Servo

// Servo Safe To move
IF (SR130_stManualModeAxis_RH_Vert_Servo.actualPosition < 57.0 AND CR130_RH_Rot_Cyl.Position2) THEN 
	OP130_RH_Servo_Safety:= FALSE;
	ELSE
	OP130_RH_Servo_Safety:= TRUE;	
	END_IF


//SR130_RH_Vert_Servo(
//	bAxis1_Ref_Switch:= , 
//	bInit:= , 
//	bErrorReset:= , 
//	bEnable:= , 
//	bMoveVelocity:= , 
//	bHalt:= , 
//	bManualMode:= , 
//	fHomePos:=SR130_RH_Servo_Control.Reference_Position , 
//	fOverride:= , 
//	fTargetPosition:= , 
//	fTargetVelocity:= , 
//	fAcc:= , 
//	fDec:= , 
//	Axis:=SR130_LH_Vert_Servo_Axis , 
//	bHome:=SR130_RH_Servo_Control.Reference_Start , 
//	bSetPosition:=SR130_RH_Servo_Control.BsetPos , 
//	bMoveAbsolute:=SR130_RH_Servo_Control.ABSmove_Start , 
//	bMoveRelative:=SR130_RH_Servo_Control.RELmove_Start , 
//	stManualModeAxis:=SR130_stManualModeAxis_RH_Vert_Servo , 
//	sAxisState=>SR130_RH_Servo_Control.Axis_State , 
//	bAxis_ready=>SR130_RH_Servo_Control.Axis_ready , 
//	bAxisInPosition=>SR130_RH_Servo_Control.Axis_In_Pos , 
//	bAxisError=>SR130_RH_Servo_Control.Axis_Error , 
//	bAxisEnabled=>SR130_RH_Servo_Control.Axis_Enabled , 
//	bAxisHomed=>SR130_RH_Servo_Control.Axis_reference , 
//	bSetPositionDone=> , 
//	bHaltDone=> , 
//	bSTOPDone=> , 
//	bHomeDone=> , 
//	bDone=> );
	
//RH Vert Servo 1

SR130_RH_Vert_Servo(
	bAxis1_Ref_Switch:= , 
	bInit:= , 
	bErrorReset:=OP130_HMI_Reset OR Servo_Reset , 
	bEnable:= OperationEnable , 
	bMoveVelocity:= , 
	bHalt:= , 
	bManualMode:=OP130_ManualSelected , 
	fHomePos:=SR130_RH_Servo_Control.Reference_Position , 
	fOverride:= , 
	fTargetPosition:= SR130_RH_Servo_Control.Position , 
	fTargetVelocity:=SR130_RH_Servo_Control.Velocity , 
	fAcc:= , 
	fDec:= ,
	Servo_High_Limit:= SR130_LH_Vert_Servo_Max_Limit,	
	Servo_Low_Limit:=SR130_LH_Vert_Servo_Min_Lim,	 	
	WARNING_LIMIT:=1,
	Actual_Torque=>SR130_RH_Servo_Control.Actual_Torque  ,
	Actual_position=> ,
    Actual_velocity=> ,
	TORQUE_LIMIT=>,	 
	Safe_move_Conditions:=OP130_RH_Servo_Safety , 
	Axis:= SR130_RH_Vert_Servo_Axis, 
	HME_WRITE_ADD:= 16#5012,	
	bHome:=SR130_LH_Servo_Control.Reference_Start , 
	bSetPosition:= SR130_RH_Servo_Control.BsetPos, 
	bMoveAbsolute:= SR130_RH_Servo_Control.ABSmove_Start, 
	bMoveRelative:=SR130_RH_Servo_Control.RELmove_Start , 
	bMoveTorque:=SR130_RH_Servo_Control.Torque_mode_Start , 
	stManualModeAxis:=SR130_stManualModeAxis_RH_Vert_Servo , 
	bmove_home:=SR130_RH_Servo_Control.Axis_Home_Cmd , 
	sAxisState=>SR130_RH_Servo_Control.Axis_State , 
	bAxis_ready=>SR130_RH_Servo_Control.Axis_ready  , 
	bAxisInPosition=>SR130_RH_Servo_Control.Axis_In_Pos , 
	bAxisError=>berror[1251] , 
	bAxisEnabled=>SR130_RH_Servo_Control.Axis_Enabled , 
	bAxisHomed=>SR130_RH_Servo_Control.Axis_reference , 
	bSetPositionDone=> , 
	bHaltDone=>SR130_RH_Servo_Control.Axis_Halted , 
	bSTOPDone=>SR130_RH_Servo_Control.Axis_Stopped , 
	bHomeDone=> , 
	bDone=> , 
	bTorqueReached=> SR130_RH_Servo_Control.Trq_reached, 
	bsafe_to_move=> SR130_RH_Servo_Control.Safe_To_Move, 
	baxis_in_home_pos=>SR130_RH_Servo_Control.Axis_In_Home , 
	bABS_Pos_done=> , 
	Actual_position=>SR130_RH_Servo_Control.Actual_Position , 
	Actual_velocity=>SR130_RH_Servo_Control.Actual_Velocity , 
	Actual_Torque=> SR130_RH_Servo_Control.Actual_Torque);
	
	// Clamping Stepper 
	// Servo Safe To move
IF (TRUE) THEN 
	SR130_RH_Servo_Control.Safe_To_Move:= TRUE;
END_IF
IF MANUAL_SELECTED THEN
	SR130_stManualModeAxis_Clamp_Stepper.targetVelocity:=50;
END_IF

SR130_Clm_Stepper(														// FESTO GUIDE GRIPPER
	bAxis1_Ref_Switch:= , 
	bInit:=  , 
	bErrorReset:=OP130_HMI_Reset OR Servo_Reset , 
	bEnable:= Servo_Enable , 
	bMoveVelocity:= , 
	bHalt:= , 
	bManualMode:=  OP130_ManualSelected, 									//MANUAL REGISTER CHANGE
	fHomePos:= , 
	fOverride:= , 
	fTargetPosition:= SR130_Stepper_Control.Position, 
	fTargetVelocity:= SR130_Stepper_Control.Velocity, 
	fAcc:= , 
	fDec:= , 
	Servo_High_Limit:= 100,	
	Servo_Low_Limit:= -100,	 	
	WARNING_LIMIT:=1,	
	Safe_move_Conditions:= Servo_Safety , 					// CHANGE
	Axis:= SR130_Clm_Stepper_Axis, 
	bHome:=SR130_Stepper_Control.Bsethome, 
	bSetPosition:= FESTO_NOT_NEED , 
	bMoveAbsolute:= SR130_Stepper_Control.ABSmove_Start, 
	bMoveRelative:= NOT_REQ , 
	bMoveTorque:= NOT_REQ , 
	stManualModeAxis:= SR130_stManualModeAxis_Clamp_Stepper, 
 	sAxisState=>SR130_Stepper_Control.Axis_State , 
	bAxis_ready=>SR130_Stepper_Control.Axis_ready , 
	bAxisInPosition=> , 
	bAxisError=> , 
	bAxisEnabled=> , 
	bAxisHomed=> , 
	bSetPositionDone=> , 
	bHaltDone=> , 
	bSTOPDone=> , 
	bHomeDone=> , 
	bDone=> , 
	bTorqueReached=> , 
	bsafe_to_move=> , 
	baxis_in_home_pos=>SR130_Stepper_Control.Axis_In_Home , 
	bABS_Pos_done=> , 
	Actual_position=>SR130_Stepper_Control.Actual_Position,
	Actual_velocity=>SR130_Stepper_Control.Actual_Velocity , 
	Actual_Torque=>SR130_Stepper_Control.Actual_Torque );
]]></ST>
    </Implementation>
    <LineIds Name="OP130_Manual">
      <LineId Id="3" Count="3" />
      <LineId Id="9" Count="206" />
      <LineId Id="219" Count="28" />
      <LineId Id="465" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="249" Count="99" />
      <LineId Id="450" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="385" Count="13" />
      <LineId Id="437" Count="1" />
      <LineId Id="436" Count="0" />
      <LineId Id="399" Count="25" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>